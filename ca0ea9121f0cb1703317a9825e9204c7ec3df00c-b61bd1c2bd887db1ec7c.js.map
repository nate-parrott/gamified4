{"version":3,"file":"ca0ea9121f0cb1703317a9825e9204c7ec3df00c-b61bd1c2bd887db1ec7c.js","mappings":"0l/EAIO,SAASA,IACd,MAAMC,EAAWC,EAsBjB,MAAO,CAAEC,UApBQC,EAAAA,EAAAA,UAAQ,KACvB,MAAMC,EAAe,SAACC,EAAsBC,EAA4BC,QAAP,IAArBD,IAAAA,EAAwB,SAAc,IAAVC,IAAAA,EAAa,IACnF,IAAK,MAAMC,KAAQH,EAAO,CACxB,MAAMI,EAAWF,EAAa,GAAGA,KAAcC,EAAKE,OAASF,EAAKE,KAG7DF,EAAKE,KAAKC,WAAW,MAASF,EAASE,WAAW,aAA4B,YAAbF,GACpEH,EAAOM,KAAKJ,GAIVA,EAAKK,WAAaJ,EAASE,WAAW,YACxCP,EAAaI,EAAKK,SAAUP,EAAQG,EAExC,CACA,OAAOH,CACT,EACA,OAAOF,EAAaJ,EAASK,MAAM,GAClC,CAACL,EAASK,QAGf,C,8NCzBO,MAAMS,E,QAAaC,GAEnB,SAASC,IACd,IAAeC,EAAGC,EAAdF,EAAO,GACX,IAAKC,EAAI,EAAGA,EAAI,GAAIA,IAClBC,EAAyB,GAAhBC,KAAKD,SAAgB,EAErB,GAALD,GAAe,IAALA,GAAgB,IAALA,GAAgB,IAALA,IAClCD,GAAQ,KAEVA,IAAc,IAALC,EAAU,EAAU,IAALA,EAAoB,EAATC,EAAa,EAAKA,GAASE,SAAS,IAEzE,OAAOJ,CACT,CAEO,SAASK,EAASC,GACxB,OAAoB,IAAhBA,EAAKC,OAAqB,KACvBD,EAAMH,KAAKD,SAAWI,EAAKC,OAAU,EAC7C,CAGO,SAASC,EAAWC,GACvB,IAAIC,EAAGC,EAAGV,EACV,IAAKA,EAAIQ,EAAEF,OAAS,EAAGN,EAAI,EAAGA,IAC1BS,EAAIP,KAAKS,MAAMT,KAAKD,UAAYD,EAAI,IACpCU,EAAIF,EAAER,GACNQ,EAAER,GAAKQ,EAAEC,GACTD,EAAEC,GAAKC,EAEX,OAAOF,CACX,CAMO,SAASI,EAAMC,EAAaC,EAAcC,EAAcC,EAAcC,GAC3E,OAAOD,GAAQH,EAAMC,IAASG,EAAOD,IAASD,EAAOD,EACvD,CAGO,SAASI,EAAeC,GAC7B,GAAkB,IAAdA,EAAGb,OAAc,OAAO,EAC5B,MAAMc,EAAS,IAAIC,IACnB,IAAK,MAAM9B,KAAQ4B,EAAI,CACrB,MAAMG,EAAQF,EAAOG,IAAIhC,IAAS,EAClC6B,EAAOI,IAAIjC,EAAM+B,EAAQ,EAC3B,CACA,OAAOpB,KAAKuB,IAAG,MAARvB,MAAI,OAAQkB,EAAOM,UAC5B,CAGO,SAASC,EAAkBC,GACC,YAA7BC,SAASC,gBACXF,IAEAC,SAASE,iBAAiB,oBAAoB,SAASC,IACpB,YAA7BH,SAASC,kBACXF,IACAC,SAASI,oBAAoB,mBAAoBD,GAErD,GAEJ,C","sources":["webpack://my-gatsby-site/./src/components/archive/useArchiveData.ts","webpack://my-gatsby-site/./src/components/utils.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport archiveManifest from '../../data/archive-manifest.json';\nimport { ArchiveItem, ArchiveManifest } from './types';\n\nexport function useArchiveData(): { allItems: ArchiveItem[] } {\n  const manifest = archiveManifest as unknown as ArchiveManifest;\n  \n  const allItems = useMemo(() => {\n    const flattenItems = (items: ArchiveItem[], result: ArchiveItem[] = [], parentPath = ''): ArchiveItem[] => {\n      for (const item of items) {\n        const fullPath = parentPath ? `${parentPath}/${item.name}` : item.name;\n        \n        // Skip items that start with underscore or are in _shared directory\n        if (!item.name.startsWith('_') && !fullPath.startsWith('_shared/') && fullPath !== '_shared') {\n          result.push(item);\n        }\n        \n        // Continue recursing through children unless we're in _shared directory\n        if (item.children && !fullPath.startsWith('_shared')) {\n          flattenItems(item.children, result, fullPath);\n        }\n      }\n      return result;\n    };\n    return flattenItems(manifest.items);\n  }, [manifest.items]);\n\n  return { allItems };\n}\n","import { RefCallback, useCallback, useEffect, useState } from 'react'\nimport { withPrefix as wp } from 'gatsby-link'\n\nexport const withPrefix = wp;\n\nexport function uuid(): string {\n  var uuid = \"\", i, random;\n  for (i = 0; i < 32; i++) {\n    random = Math.random() * 16 | 0;\n\n    if (i == 8 || i == 12 || i == 16 || i == 20) {\n      uuid += \"-\"\n    }\n    uuid += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);\n  }\n  return uuid;\n}\n\nexport function pick1<T>(list: T[]): T | null {\n\tif (list.length === 0) return null;\n\treturn list[(Math.random() * list.length) | 0]\n}\n\n// Modifies input\nexport function shuffle<T>(a: T[]): T[] {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\nexport function clamp(val: number, min: number, max: number): number {\n  return Math.min(Math.max(val, min), max);\n}\n\nexport function remap(val: number, min1: number, max1: number, min2: number, max2: number): number {\n  return min2 + (val - min1) * (max2 - min2) / (max1 - min1);\n}\n\n// Returns the count of the most repeated element in the array\nexport function mostRepeats<T>(of: T[]): number {\n  if (of.length === 0) return 0;\n  const counts = new Map<T, number>();\n  for (const item of of) {\n    const count = counts.get(item) || 0;\n    counts.set(item, count + 1);\n  }\n  return Math.max(...counts.values());\n}\n\n\nexport function runWhenTabVisible(fn: () => void) {\n  if (document.visibilityState === 'visible') {\n    fn();\n  } else {\n    document.addEventListener('visibilitychange', function handler() {\n      if (document.visibilityState === 'visible') {\n        fn();\n        document.removeEventListener('visibilitychange', handler);\n      }\n    });\n  }\n}\n\ntype UseInViewportOptions = {\n  viewportPaddingTop?: number;\n  viewportPaddingBottom?: number;\n};\n\nexport function useInViewport<T extends Element>(\n  options: UseInViewportOptions = {}\n): [RefCallback<T>, boolean] {\n  const [target, setTarget] = useState<T | null>(null);\n  const [isInViewport, setIsInViewport] = useState(false);\n\n  const paddingTop = clamp(options.viewportPaddingTop ?? 0, 0, 0.99);\n  const paddingBottom = clamp(options.viewportPaddingBottom ?? 0, 0, 0.99);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    if (!target) return;\n\n    if (typeof IntersectionObserver === 'undefined') {\n      setIsInViewport(true);\n      return;\n    }\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        setIsInViewport(entry.isIntersecting && entry.intersectionRatio > 0);\n      },\n      {\n        root: null,\n        rootMargin: `${-paddingTop * 100}% 0% ${-paddingBottom * 100}% 0%`,\n        threshold: 0,\n      }\n    );\n\n    observer.observe(target);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [target, paddingTop, paddingBottom]);\n\n  const ref = useCallback<RefCallback<T>>((node) => {\n    setTarget(node);\n    if (!node) {\n      setIsInViewport(false);\n    }\n  }, []);\n\n  return [ref, isInViewport];\n}\n"],"names":["useArchiveData","manifest","archiveManifest","allItems","useMemo","flattenItems","items","result","parentPath","item","fullPath","name","startsWith","push","children","withPrefix","wp","uuid","i","random","Math","toString","pick1","list","length","shuffle","a","j","x","floor","remap","val","min1","max1","min2","max2","mostRepeats","of","counts","Map","count","get","set","max","values","runWhenTabVisible","fn","document","visibilityState","addEventListener","handler","removeEventListener"],"sourceRoot":""}