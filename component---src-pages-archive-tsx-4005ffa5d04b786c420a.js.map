{"version":3,"file":"component---src-pages-archive-tsx-4005ffa5d04b786c420a.js","mappings":"o0gEAuPA,MAjOqCA,KACnC,MAAM,EAACC,EAAY,EAAEC,IAAmBC,EAAAA,EAAAA,UAA6B,OAC/D,EAACC,EAAa,EAAEC,IAAoBF,EAAAA,EAAAA,UAAsB,IAAIG,KAC9DC,EAA4BC,EAY5BC,EAAiB,SAACC,EAAmBC,QAAa,IAAbA,IAAAA,EAAgB,GACzD,MAAMC,EAAaR,EAAcS,IAAIH,EAAKI,MACpCC,GAAad,aAAY,EAAZA,EAAca,QAASJ,EAAKI,KAE/C,OACEE,EAAAA,cAAAA,MAAAA,CAAKC,IAAKP,EAAKI,KAAMI,UAAU,aAC7BF,EAAAA,cAAAA,MAAAA,CACEE,UAAW,cAAaH,EAAa,WAAa,IAClDI,MAAO,CAAEC,YAAwB,GAART,EAAa,GAAhB,MACtBU,QAASA,KACW,cAAdX,EAAKY,MApBKR,KACtB,MAAMS,EAAc,IAAIjB,IAAIF,GACxBmB,EAAYV,IAAIC,GAClBS,EAAYC,OAAOV,GAEnBS,EAAYE,IAAIX,GAElBT,EAAiBkB,EAAY,EAcnBG,CAAehB,EAAKI,MAEtBZ,EAAgBQ,EAAK,GAGR,cAAdA,EAAKY,MACJN,EAAAA,cAAAA,OAAAA,CAAME,UAAU,aACbN,EAAa,KAAO,MAGV,SAAdF,EAAKY,MACJN,EAAAA,cAAAA,OAAAA,CAAME,UAAU,aACbS,EAAYjB,EAAKkB,UAAY,UAGlCZ,EAAAA,cAAAA,OAAAA,CAAME,UAAU,cAAcR,EAAKmB,MACpB,SAAdnB,EAAKY,MAAmBZ,EAAKoB,eAC5Bd,EAAAA,cAAAA,OAAAA,CAAME,UAAU,aAAaR,EAAKoB,gBAGvB,cAAdpB,EAAKY,MAAwBV,GAAcF,EAAKqB,UAC/Cf,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACZR,EAAKqB,SAASC,KAAIC,GAASxB,EAAewB,EAAOtB,EAAQ,MAKpE,EAEMgB,EAAeC,IACnB,OAAQA,GACN,IAAK,QAAS,MAAO,MACrB,IAAK,QAAS,MAAO,KACrB,IAAK,QAAS,MAAO,KACrB,IAAK,WAEL,QAAS,MAAO,KADhB,IAAK,OAAQ,MAAO,KAEtB,EAkFIM,EA/BqBC,KACzB,IAAIC,EAAQ,EACRC,EAAc,EACdC,EAAY,EAEhB,MAAMC,EAAYC,IAChBA,EAASC,SAAQ/B,IACG,SAAdA,EAAKY,MACPc,IACAE,GAAa5B,EAAKgC,MAAQ,IAE1BL,IACI3B,EAAKqB,UACPQ,EAAS7B,EAAKqB,UAElB,GACA,EAIJ,OADAQ,EAASJ,GACF,CAAEC,QAAOC,cAAaC,YAAW,EAW5BK,CAAkBpC,EAAS4B,OAEzC,OACEnB,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gBACbF,EAAAA,cAAAA,SAAAA,CAAQE,UAAU,kBAChBF,EAAAA,cAAAA,KAAAA,KAAI,mBACJA,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACbF,EAAAA,cAAAA,OAAAA,KAAOkB,EAAMG,YAAY,YACzBrB,EAAAA,cAAAA,OAAAA,KAAOkB,EAAME,MAAM,UACnBpB,EAAAA,cAAAA,OAAAA,KAjBa4B,KACnB,GAAc,IAAVA,EAAa,MAAO,UACxB,MAEMC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIJ,GAASE,KAAKE,IAFlC,OAGV,OAAOC,YAAYL,EAAQE,KAAKI,IAHtB,KAG6BL,IAAIM,QAAQ,IAAM,IAF3C,CAAC,QAAS,KAAM,KAAM,MAEiCN,EAAE,EAY1DO,CAAYlB,EAAMI,cAI7BtB,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACbF,EAAAA,cAAAA,QAAAA,CAAOE,UAAU,mBACfF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACZX,EAAS4B,MAAMH,KAAItB,GAAQD,EAAeC,OAI/CM,EAAAA,cAAAA,OAAAA,CAAME,UAAU,kBACbjB,EACCe,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACbF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACbF,EAAAA,cAAAA,KAAAA,KAAKf,EAAa4B,MAClBb,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,eACbF,EAAAA,cAAAA,OAAAA,CAAME,UAAU,eACS,cAAtBjB,EAAaqB,KAAuB,SAAW,QAEjDrB,EAAa2B,UACZZ,EAAAA,cAAAA,OAAAA,CAAME,UAAU,oBAAoBjB,EAAa2B,UAElD3B,EAAa6B,eACZd,EAAAA,cAAAA,OAAAA,CAAME,UAAU,eAAejB,EAAa6B,gBAGhDd,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,eAAejB,EAAaa,OAGtB,SAAtBb,EAAaqB,MACZN,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBAvHFR,KAAsB,MAC/C,IAAKA,GAAsB,SAAdA,EAAKY,KAAiB,OAAO,KAE1C,MAAM+B,EAAW,YAAY3C,EAAKI,OAElC,OAAQJ,EAAKkB,UACX,IAAK,QACH,OACEZ,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACbF,EAAAA,cAAAA,MAAAA,CAAKsC,IAAKD,EAAUE,IAAK7C,EAAKmB,QAGpC,IAAK,QACH,OACEb,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACbF,EAAAA,cAAAA,QAAAA,CAAOwC,UAAQ,GACbxC,EAAAA,cAAAA,SAAAA,CAAQsC,IAAKD,EAAU/B,KAAM,SAAuB,QAAvB,EAASZ,EAAK+C,iBAAS,aAAdC,EAAgBC,MAAM,OAAQ,iDAK5E,IAAK,OACL,IAAK,WACH,MAAuB,UAAnBjD,EAAK+C,UAELzC,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACbF,EAAAA,cAAAA,SAAAA,CAAQsC,IAAKD,EAAUO,MAAOlD,EAAKmB,QAKvCb,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gBACbF,EAAAA,cAAAA,IAAAA,CAAG6C,KAAMR,EAAUS,OAAO,SAASC,IAAI,uBAAsB,QACrDrD,EAAKmB,OAInB,QACE,OACEb,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gBACbF,EAAAA,cAAAA,IAAAA,CAAG6C,KAAMR,EAAUS,OAAO,SAASC,IAAI,uBAAsB,YACjDrD,EAAKmB,OAIzB,EA2EemC,CAAkB/D,IAIA,cAAtBA,EAAaqB,MAAwBrB,EAAa8B,UACjDf,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,oBACbF,EAAAA,cAAAA,KAAAA,KAAI,aAAWf,EAAa8B,SAASkC,OAAO,WAC5CjD,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACZjB,EAAa8B,SAASC,KAAIC,GACzBjB,EAAAA,cAAAA,MAAAA,CACEC,IAAKgB,EAAMnB,KACXI,UAAU,iBACVG,QAASA,IAAMnB,EAAgB+B,IAE/BjB,EAAAA,cAAAA,OAAAA,CAAME,UAAU,kBACE,cAAfe,EAAMX,KAAuB,KAAOK,EAAYM,EAAML,UAAY,UAErEZ,EAAAA,cAAAA,OAAAA,CAAME,UAAU,kBAAkBe,EAAMJ,MACvCI,EAAMH,eACLd,EAAAA,cAAAA,OAAAA,CAAME,UAAU,kBAAkBe,EAAMH,qBAStDd,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gBACbF,EAAAA,cAAAA,KAAAA,KAAI,kCACJA,EAAAA,cAAAA,IAAAA,KAAG,gFAKP,EAMH,MAAMkD,EAAeA,IAC1BlD,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAO,mBACPA,EAAAA,cAAAA,OAAAA,CAAMa,KAAK,cAAcsC,QAAQ,+B","sources":["webpack://my-gatsby-site/./src/pages/archive.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HeadFC, PageProps } from 'gatsby';\nimport archiveManifest from '../data/archive-manifest.json';\nimport '../components/archive.css';\n\ninterface ArchiveItem {\n  name: string;\n  type: 'file' | 'directory';\n  path: string;\n  size?: number;\n  sizeFormatted?: string;\n  fileType?: string;\n  extension?: string;\n  children?: ArchiveItem[];\n}\n\ninterface ArchiveManifest {\n  generatedAt: string;\n  rootPath: string;\n  items: ArchiveItem[];\n}\n\nconst Archive: React.FC<PageProps> = () => {\n  const [selectedItem, setSelectedItem] = useState<ArchiveItem | null>(null);\n  const [expandedPaths, setExpandedPaths] = useState<Set<string>>(new Set());\n  const manifest: ArchiveManifest = archiveManifest;\n\n  const toggleExpanded = (path: string) => {\n    const newExpanded = new Set(expandedPaths);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n    }\n    setExpandedPaths(newExpanded);\n  };\n\n  const renderTreeItem = (item: ArchiveItem, depth: number = 0) => {\n    const isExpanded = expandedPaths.has(item.path);\n    const isSelected = selectedItem?.path === item.path;\n\n    return (\n      <div key={item.path} className=\"tree-item\">\n        <div\n          className={`tree-node ${isSelected ? 'selected' : ''}`}\n          style={{ paddingLeft: `${depth * 20 + 10}px` }}\n          onClick={() => {\n            if (item.type === 'directory') {\n              toggleExpanded(item.path);\n            }\n            setSelectedItem(item);\n          }}\n        >\n          {item.type === 'directory' && (\n            <span className=\"tree-icon\">\n              {isExpanded ? 'üìÇ' : 'üìÅ'}\n            </span>\n          )}\n          {item.type === 'file' && (\n            <span className=\"tree-icon\">\n              {getFileIcon(item.fileType || 'other')}\n            </span>\n          )}\n          <span className=\"tree-label\">{item.name}</span>\n          {item.type === 'file' && item.sizeFormatted && (\n            <span className=\"tree-size\">{item.sizeFormatted}</span>\n          )}\n        </div>\n        {item.type === 'directory' && isExpanded && item.children && (\n          <div className=\"tree-children\">\n            {item.children.map(child => renderTreeItem(child, depth + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getFileIcon = (fileType: string) => {\n    switch (fileType) {\n      case 'image': return 'üñºÔ∏è';\n      case 'video': return 'üé¨';\n      case 'audio': return 'üéµ';\n      case 'document': return 'üìÑ';\n      case 'code': return 'üíª';\n      default: return 'üìÑ';\n    }\n  };\n\n  const renderFilePreview = (item: ArchiveItem) => {\n    if (!item || item.type !== 'file') return null;\n\n    const filePath = `/archive/${item.path}`;\n\n    switch (item.fileType) {\n      case 'image':\n        return (\n          <div className=\"preview-image\">\n            <img src={filePath} alt={item.name} />\n          </div>\n        );\n      case 'video':\n        return (\n          <div className=\"preview-video\">\n            <video controls>\n              <source src={filePath} type={`video/${item.extension?.slice(1)}`} />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        );\n      case 'code':\n      case 'document':\n        if (item.extension === '.html') {\n          return (\n            <div className=\"preview-iframe\">\n              <iframe src={filePath} title={item.name} />\n            </div>\n          );\n        }\n        return (\n          <div className=\"preview-link\">\n            <a href={filePath} target=\"_blank\" rel=\"noopener noreferrer\">\n              Open {item.name}\n            </a>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"preview-link\">\n            <a href={filePath} target=\"_blank\" rel=\"noopener noreferrer\">\n              Download {item.name}\n            </a>\n          </div>\n        );\n    }\n  };\n\n  const getDirectoryStats = (items: ArchiveItem[]): { files: number; directories: number; totalSize: number } => {\n    let files = 0;\n    let directories = 0;\n    let totalSize = 0;\n\n    const traverse = (itemList: ArchiveItem[]) => {\n      itemList.forEach(item => {\n        if (item.type === 'file') {\n          files++;\n          totalSize += item.size || 0;\n        } else {\n          directories++;\n          if (item.children) {\n            traverse(item.children);\n          }\n        }\n      });\n    };\n\n    traverse(items);\n    return { files, directories, totalSize };\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const stats = getDirectoryStats(manifest.items);\n\n  return (\n    <div className=\"archive-page\">\n      <header className=\"archive-header\">\n        <h1>Archive Browser</h1>\n        <div className=\"archive-stats\">\n          <span>{stats.directories} folders</span>\n          <span>{stats.files} files</span>\n          <span>{formatBytes(stats.totalSize)}</span>\n        </div>\n      </header>\n      \n      <div className=\"archive-layout\">\n        <aside className=\"archive-sidebar\">\n          <div className=\"tree-container\">\n            {manifest.items.map(item => renderTreeItem(item))}\n          </div>\n        </aside>\n        \n        <main className=\"archive-detail\">\n          {selectedItem ? (\n            <div className=\"detail-content\">\n              <div className=\"detail-header\">\n                <h2>{selectedItem.name}</h2>\n                <div className=\"detail-meta\">\n                  <span className=\"detail-type\">\n                    {selectedItem.type === 'directory' ? 'Folder' : 'File'}\n                  </span>\n                  {selectedItem.fileType && (\n                    <span className=\"detail-file-type\">{selectedItem.fileType}</span>\n                  )}\n                  {selectedItem.sizeFormatted && (\n                    <span className=\"detail-size\">{selectedItem.sizeFormatted}</span>\n                  )}\n                </div>\n                <div className=\"detail-path\">{selectedItem.path}</div>\n              </div>\n              \n              {selectedItem.type === 'file' && (\n                <div className=\"detail-preview\">\n                  {renderFilePreview(selectedItem)}\n                </div>\n              )}\n              \n              {selectedItem.type === 'directory' && selectedItem.children && (\n                <div className=\"detail-directory\">\n                  <h3>Contents ({selectedItem.children.length} items)</h3>\n                  <div className=\"directory-grid\">\n                    {selectedItem.children.map(child => (\n                      <div\n                        key={child.path}\n                        className=\"directory-item\"\n                        onClick={() => setSelectedItem(child)}\n                      >\n                        <span className=\"directory-icon\">\n                          {child.type === 'directory' ? 'üìÅ' : getFileIcon(child.fileType || 'other')}\n                        </span>\n                        <span className=\"directory-name\">{child.name}</span>\n                        {child.sizeFormatted && (\n                          <span className=\"directory-size\">{child.sizeFormatted}</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"detail-empty\">\n              <h2>Select an item to view details</h2>\n              <p>Choose a file or folder from the sidebar to see its contents and preview.</p>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Archive;\n\nexport const Head: HeadFC = () => (\n  <>\n    <title>Archive Browser</title>\n    <meta name=\"description\" content=\"Browse the project archive\" />\n  </>\n);\n"],"names":["Archive","selectedItem","setSelectedItem","useState","expandedPaths","setExpandedPaths","Set","manifest","archiveManifest","renderTreeItem","item","depth","isExpanded","has","path","isSelected","React","key","className","style","paddingLeft","onClick","type","newExpanded","delete","add","toggleExpanded","getFileIcon","fileType","name","sizeFormatted","children","map","child","stats","items","files","directories","totalSize","traverse","itemList","forEach","size","getDirectoryStats","bytes","i","Math","floor","log","parseFloat","pow","toFixed","formatBytes","filePath","src","alt","controls","extension","_item$extension","slice","title","href","target","rel","renderFilePreview","length","Head","content"],"sourceRoot":""}