{"version":3,"file":"component---src-pages-connections-tsx-3d81a89a66caa364c892.js","mappings":"oJAUA,MAAMA,EAAyB,CAC7B,CACEC,KAAM,QACNC,MAAO,CAAC,WAAY,SAAU,WAAY,iBAC1CC,YAAa,aACbC,UAAW,SAEb,CACEH,KAAM,QACNC,MAAO,CAAC,QAAS,mBAAoB,QAAS,YAC9CC,YAAa,2CACbC,UAAW,SAEb,CACEH,KAAM,QACNC,MAAO,CAAC,OAAQ,QAAS,QAAS,UAClCC,YAAa,mBACbC,UAAW,SAEb,CACEH,KAAM,QACNC,MAAO,CAAC,QAAS,QAAS,gBAAiB,UAC3CC,YAAa,sBACbC,UAAW,UA+Ff,UA3FaC,KACX,MAAM,EAACH,EAAK,EAAEI,IAAYC,EAAAA,EAAAA,UAAmB,KACvC,EAACC,EAAa,EAAEC,IAAoBF,EAAAA,EAAAA,UAAmB,KACvD,EAACG,EAAgB,EAAEC,IAAuBJ,EAAAA,EAAAA,UAAmB,KAC7D,EAACK,EAAU,EAAEC,IAAiBN,EAAAA,EAAAA,WAAS,IAE7CO,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAWf,EAAWgB,SAAQC,GAAOA,EAAIf,QAC/CI,EAASS,EAASG,MAAK,IAAMC,KAAKC,SAAW,KAAK,GACjD,KAcHN,EAAAA,EAAAA,YAAU,KACR,GAA6B,IAAzBN,EAAca,OAAc,CAE9B,MAAMC,EAAmBtB,EAAWuB,MAAKC,GACvCA,EAAStB,MAAMuB,OAAMC,GAAQlB,EAAcmB,SAASD,OAGlDJ,IAAqBZ,EAAiBiB,SAASL,EAAiBrB,OAClEU,GAAoBiB,GAAQ,GAAJ,eAAQA,GAAI,CAAEN,EAAiBrB,SACvDQ,EAAiB,UACaoB,IAArBP,IACTT,GAAc,GACdiB,YAAW,KACTjB,GAAc,GACdJ,EAAiB,GAAG,GACnB,KAEP,IACC,CAACD,IAGJ,MAAMuB,EAAiBC,EAAAA,SAAc,KACnC,MAAMC,EAAW/B,EAAMgC,QAAOR,IAC3BhB,EAAiByB,MAAKlB,IAAG,aACY,QADZ,EACxBjB,EAAWuB,MAAKa,GAAKA,EAAEnC,OAASgB,WAAI,aAApCoB,EAAsCnC,MAAMyB,SAASD,EAAK,MAG9D,OAAOY,EAAAA,EAAAA,GAAIL,GAAUf,MAAK,IAAMC,KAAKC,SAAW,IAAI,GACnD,CAAClB,EAAOQ,IAEX,OACEsB,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,mBACb4B,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,gBACb4B,EAAAA,cAAAA,KAAAA,CAAI5B,UAAU,SAAQ,uBAEtB4B,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,aACb4B,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,qBACZM,EAAiB6B,KAAIC,IACpB,MAAMhB,EAAWxB,EAAWuB,MAAKa,GAAKA,EAAEnC,OAASuC,IACjD,OAAOhB,GACLQ,EAAAA,cAAAA,MAAAA,CAAKS,IAAKD,EAASpC,UAAW,cAAcoB,EAASpB,aACnD4B,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,wBAAwBoB,EAASrB,aAChD6B,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,gBAAgBoB,EAAStB,MAAMwC,KAAK,OAEtD,KAILV,EAAAA,cAAAA,MAAAA,CAAK5B,UAAU,QACZ2B,EAAeQ,KAAI,CAACb,EAAMiB,IACzBX,EAAAA,cAAAA,MAAAA,CAAKS,IAAKE,EAAGvC,UAAU,kBACrB4B,EAAAA,cAAAA,SAAAA,CACE5B,UAAW,QAAQI,EAAcmB,SAASD,GAAQ,WAAa,mCACpDd,GAAcJ,EAAcmB,SAASD,GAAQ,QAAU,KAClEkB,QAASA,IAlELlB,KAClBjB,GAAiBmB,GACXA,EAAKD,SAASD,GACTE,EAAKM,QAAOW,GAAKA,IAAMnB,IAE5BE,EAAKP,OAAS,EACT,GAAP,eAAWO,GAAI,CAAEF,IAEZE,GACP,EAyD2BkB,CAAWpB,IAEzBA,SAOT,C","sources":["webpack://my-gatsby-site/./src/pages/connections.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './connections.css';\n\ntype Category = {\n  name: string;\n  words: string[];\n  displayName: string;\n  className: string;\n};\n\nconst CATEGORIES: Category[] = [\n  {\n    name: 'trips',\n    words: ['Scotland', 'Hawaii', 'Montreal', 'New Hampshire'],\n    displayName: '2024 Trips',\n    className: 'trips'\n  },\n  {\n    name: 'meals',\n    words: ['Steak', 'Zucchini lasagna', 'Chili', 'Potatoes'],\n    displayName: 'Meals you\\'ll never have again ha ha ha !',\n    className: 'meals'\n  },\n  {\n    name: 'jenny',\n    words: ['Cute', 'Silly', 'Sweet', 'Loving'],\n    displayName: 'Jenny Attributes',\n    className: 'jenny'\n  },\n  {\n    name: 'games',\n    words: ['Goose', 'Train', 'Mango Muncher', 'Groups'],\n    displayName: 'Main Thing In Games',\n    className: 'games'\n  }\n];\n\nconst Page = () => {\n  const [words, setWords] = useState<string[]>([]);\n  const [selectedWords, setSelectedWords] = useState<string[]>([]);\n  const [solvedCategories, setSolvedCategories] = useState<string[]>([]);\n  const [wrongGuess, setWrongGuess] = useState(false);\n\n  useEffect(() => {\n    // Shuffle words at launch\n    const allWords = CATEGORIES.flatMap(cat => cat.words);\n    setWords(allWords.sort(() => Math.random() - 0.5));\n  }, []);\n\n  const toggleWord = (word: string) => {\n    setSelectedWords(prev => {\n      if (prev.includes(word)) {\n        return prev.filter(w => w !== word);\n      }\n      if (prev.length < 4) {\n        return [...prev, word];\n      }\n      return prev;\n    });\n  };\n\n  useEffect(() => {\n    if (selectedWords.length === 4) {\n      // Check if selected words form a category\n      const matchingCategory = CATEGORIES.find(category =>\n        category.words.every(word => selectedWords.includes(word))\n      );\n\n      if (matchingCategory && !solvedCategories.includes(matchingCategory.name)) {\n        setSolvedCategories(prev => [...prev, matchingCategory.name]);\n        setSelectedWords([]);\n      } else if (matchingCategory === undefined) {\n        setWrongGuess(true);\n        setTimeout(() => {\n          setWrongGuess(false);\n          setSelectedWords([]);\n        }, 1000);\n      }\n    }\n  }, [selectedWords]);\n\n  // Filter and shuffle remaining words whenever solved categories change\n  const remainingWords = React.useMemo(() => {\n    const filtered = words.filter(word => \n      !solvedCategories.some(cat => \n        CATEGORIES.find(c => c.name === cat)?.words.includes(word)\n      )\n    );\n    return [...filtered].sort(() => Math.random() - 0.5);\n  }, [words, solvedCategories]);\n\n  return (\n    <div className=\"ConnectionsPage\">\n      <div className=\"game-content\">\n        <h1 className=\"title\">Dummy's Connections</h1>\n        \n        <div className=\"game-area\">\n          <div className=\"solved-categories\">\n            {solvedCategories.map(catName => {\n              const category = CATEGORIES.find(c => c.name === catName);\n              return category && (\n                <div key={catName} className={`solved-row ${category.className}`}>\n                  <div className=\"solved-category-name\">{category.displayName}</div>\n                  <div className=\"solved-words\">{category.words.join(', ')}</div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"grid\">\n            {remainingWords.map((word, i) => (\n              <div key={i} className=\"word-container\">\n                <button\n                  className={`word ${selectedWords.includes(word) ? 'selected' : ''} \n                           ${wrongGuess && selectedWords.includes(word) ? 'wrong' : ''}`}\n                  onClick={() => toggleWord(word)}\n                >\n                  {word}\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Page;"],"names":["CATEGORIES","name","words","displayName","className","Page","setWords","useState","selectedWords","setSelectedWords","solvedCategories","setSolvedCategories","wrongGuess","setWrongGuess","useEffect","allWords","flatMap","cat","sort","Math","random","length","matchingCategory","find","category","every","word","includes","prev","undefined","setTimeout","remainingWords","React","filtered","filter","some","c","_CATEGORIES$find","_toConsumableArray","map","catName","key","join","i","onClick","w","toggleWord"],"sourceRoot":""}